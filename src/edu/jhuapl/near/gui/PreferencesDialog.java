/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingsDialog.java
 *
 * Created on Mar 27, 2012, 9:37:47 PM
 */
package edu.jhuapl.near.gui;

import java.util.ArrayList;
import java.util.LinkedHashMap;

import edu.jhuapl.near.gui.Renderer.LightingType;
import edu.jhuapl.near.util.Preferences;

/**
 *
 * @author eli
 */
public class PreferencesDialog extends javax.swing.JDialog {

    private ViewerManager viewerManager;

    /** Creates new form SettingsDialog */
    public PreferencesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Preferences");
    }

    public void setViewerManager(ViewerManager viewerManager)
    {
        this.viewerManager = viewerManager;
    }

    public void setVisible(boolean b) {
        if (b)
        {
            Renderer renderer = viewerManager.getCurrentViewer().getRenderer();
            if (renderer.getLighting() == Renderer.LightingType.LIGHT_KIT)
                lightKitRadioButton.setSelected(true);
            else
                headlightRadioButton.setSelected(true);
            intensitySpinner.setValue(renderer.getHeadlightIntensity());
            showAxesCheckBox.setSelected(renderer.getShowOrientationAxes());
            interactiveCheckBox.setSelected(renderer.getOrientationAxesInteractive());
        }

        super.setVisible(b);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        headlightRadioButton = new javax.swing.JRadioButton();
        intensityLabel = new javax.swing.JLabel();
        showAxesCheckBox = new javax.swing.JCheckBox();
        interactiveCheckBox = new javax.swing.JCheckBox();
        lightKitRadioButton = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        applyButton = new javax.swing.JButton();
        okayButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        intensitySpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(headlightRadioButton);
        headlightRadioButton.setText("Headlight");
        headlightRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headlightRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(headlightRadioButton, gridBagConstraints);

        intensityLabel.setText("Intensity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        getContentPane().add(intensityLabel, gridBagConstraints);

        showAxesCheckBox.setText("Show Axes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(showAxesCheckBox, gridBagConstraints);

        interactiveCheckBox.setText("Interactive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(interactiveCheckBox, gridBagConstraints);

        buttonGroup1.add(lightKitRadioButton);
        lightKitRadioButton.setSelected(true);
        lightKitRadioButton.setText("Light Kit");
        lightKitRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightKitRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(lightKitRadioButton, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(applyButton, gridBagConstraints);

        okayButton.setText("OK");
        okayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okayButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(okayButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Lighting");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel2.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jSeparator1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Orientation Axes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel3.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jSeparator2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        getContentPane().add(jPanel3, gridBagConstraints);

        intensitySpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, 1.0d, 0.01d));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(intensitySpinner, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        ArrayList<Viewer> viewers = viewerManager.getAllViewers();
        for (Viewer v : viewers)
        {
            Renderer renderer = v.getRenderer();
            if (renderer != null)
            {
                LinkedHashMap<String, Object> preferencesMap = new LinkedHashMap<String, Object>();
                if (lightKitRadioButton.isSelected())
                {
                    renderer.setLighting(LightingType.LIGHT_KIT);
                    preferencesMap.put(Preferences.LIGHTING_TYPE, LightingType.LIGHT_KIT.toString());
                }
                else
                {
                    renderer.setLighting(LightingType.HEADLIGHT);
                    preferencesMap.put(Preferences.LIGHTING_TYPE, LightingType.HEADLIGHT.toString());
                }

                renderer.setHeadlightIntensity((Double)intensitySpinner.getValue());
                preferencesMap.put(Preferences.HEADLIGHT_INTENSITY, (Double)intensitySpinner.getValue());

                renderer.setShowOrientationAxes(showAxesCheckBox.isSelected());
                preferencesMap.put(Preferences.SHOW_AXES, (Boolean)showAxesCheckBox.isSelected());

                renderer.setOrientationAxesInteractive(interactiveCheckBox.isSelected());
                preferencesMap.put(Preferences.INTERACTIVE_AXES, (Boolean)interactiveCheckBox.isSelected());

                Preferences.getInstance().put(preferencesMap);
            }
        }
    }//GEN-LAST:event_applyButtonActionPerformed

    private void okayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okayButtonActionPerformed
        applyButtonActionPerformed(evt);
        setVisible(false);
    }//GEN-LAST:event_okayButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void lightKitRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightKitRadioButtonActionPerformed
        boolean enabled = headlightRadioButton.isSelected();
        intensityLabel.setEnabled(enabled);
        intensitySpinner.setEnabled(enabled);
    }//GEN-LAST:event_lightKitRadioButtonActionPerformed

    private void headlightRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headlightRadioButtonActionPerformed
        boolean enabled = headlightRadioButton.isSelected();
        intensityLabel.setEnabled(enabled);
        intensitySpinner.setEnabled(enabled);
    }//GEN-LAST:event_headlightRadioButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton headlightRadioButton;
    private javax.swing.JLabel intensityLabel;
    private javax.swing.JSpinner intensitySpinner;
    private javax.swing.JCheckBox interactiveCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton lightKitRadioButton;
    private javax.swing.JButton okayButton;
    private javax.swing.JCheckBox showAxesCheckBox;
    // End of variables declaration//GEN-END:variables
}
